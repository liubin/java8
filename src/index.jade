doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Java SE 8 Introduction

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel='stylesheet', type='text/css', href='bower_components/bespoke-fx/src/main.css')
    link(rel='stylesheet', type='text/css', href='bower_components/bespoke-fx/src/animations.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body


    article

      section
        h1 Java SE 8 Introduction
        p bin liu
        p Credit: <a href="http://overwater.poco.cn">http://overwater.poco.cn</a>

      section
        h2 Target
        ul
          li
          li Funcational
          li None for(int i=0; i++; i< array.size())
          li Lambda
          li Stream

      section
        h2 Java versions
        ul
          li
          li <a href="http://www.oracle.com/technetwork/java/javase/8train-relnotes-latest-2153846.html">JDK 8 Release Notes</a>
          li <a href="http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html">What's New in JDK 8</a>


      section
        h2 New features
        ul
          li
          li Lambda Expressions
          li Method references
          li Default methods
          li Repeating Annotations
          li Stream
          li Nashorn Javascript Engine
          li Parallel Array Sorting
          li Standard Encoding and Decoding Base64
          li Concurrency

      section
        h2 Why lambda
        ul
          li
          li Parallelism
          li Asynchronous
          li Cool

      section
        h2 Lambda
        hr
        pre
          code.language-java.
            ActionListener al = new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    showMessageDialog(f, "你好);
                }
            };


      section
        h2 Lambda
        hr
        pre
          code.language-java.
            ActionListener al =
                        e -> showMessageDialog(frame, "你好");



      section
        h2 Funcational Interface
        ul
          li
          li Interfaces contains only one abstract method
          li @FuncationalInterface

      section
        h2 Funcational Interface
        pre
          code.language-java.
            public void printPersons(List<Person> roster,
                CheckPerson tester) {
                      ...
            }

            // interface
            interface CheckPerson {
                boolean test(Person p);
            }

      section
        h2 Funcational Interface
        pre
          code.language-java.
            // anonymous class
            printPersons(
                roster,
                new CheckPerson() {
                    public boolean test(Person p) {
                        return p.getGender() == Person.Sex.MALE
                            && p.getAge() >= 18
                            && p.getAge() <= 25;
                    }
                }
            );

      section
        h2 Funcational Interface

        pre
          code.language-java.
            printPersons(
                roster,
                (Person p) -> p.getGender() == Person.Sex.MALE
                    && p.getAge() >= 18
                    && p.getAge() <= 25
            );
        strong <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">lambda expressions tutorial</a>


      section
        h2 Lambda
        pre
          code.language-java.
            public static void processPersons(
                List<Person> roster,
                Predicate<Person> tester,
                Consumer<Person> block) {
                    for (Person p : roster) {
                        if (tester.test(p)) {
                            block.accept(p);
                        }
                    }
            }

      section
        h2 Lambda
        pre
          code.language-java.
            processPersonsWithFunction(
                roster,
                p -> p.getGender() == Person.Sex.MALE
                    && p.getAge() >= 18
                    && p.getAge() <= 25,
                p -> p.getEmailAddress(),
                email -> System.out.println(email)
            );


      section
        h2 Lambda syntax

        pre
          code.language-java.

            () -> System.out.println("hehe")

            x -> System.out.println("hehe " + x)

            (a, b) -> a + b

            (int x, int y) -> {
                return x + y;
            }


      section
        h2 Lambda Variables Scope
        ul
          li
          li have the same access to local variables of the enclosing scope
          li do not have any shadowing issues/ no new level of scoping

      section
        h2 Lambda
        ul
          li
          li not directly support by JVM, processed as Class's instances


      section
        h2 Method reference
        ul
          li
          li instance::method (with only one parameter)
          li Class::method
            ul
              li
              li static method with only one parameter
              li instance mehtod without parameter


      section
        h2 Default Method
        p also
        ul
          li
          li virtual extension methods
          li Defender method

      section
        h2 Generalized Target-Type Inference



      section
        h2 Stream API
        ul
          li
          li java.util.stream
          li Stream pipeline
          li A sequence of elements supporting sequential and parallel aggregate operations
          li Most stream operations accept parameters that describe user-specified behavior
          ul
            li
            li instances of a functional interface such as Function
            li lambda expressions
            li method references

      section
        h2 Ruby/Rails

        pre.bullet
          code.language-ruby.
            # Ruby
            [1,2,3,4].reduce(:+) # => 10

            Product.where("type = 0").limit(100).order("price")

        pre.bullet
          code.language-java.
            // Java
            Integer sum = integers.reduce(0, Integer::sum);


      section
        h2 Stream API

        pre
          code.language-java.
            List<String> girlStudyBugs = students.stream()
                .filter(f -> f.getGender().equals("F"))
                .filter(f -> f.getScore() > 80)
                .sorted(Comparator.comparingInt(Student::getScore))
                .map(Student::getName)
                .collect(Collectors.toList());

      section
        h2 Stream Operations
        ul
          li
          li Source(Arrays,Collections, IO channel)
          li Intermediate Operations(All intermediate operations are lazy)
          li Terminal Operation


      section
        h2 Stream Source
        ul
          li
          li Stream&lt;T&gt;
          li IntStream, LongStream, DoubleStream

      section
        h2 Create Stream
        ul
          li
          li Collection#stream
          li Arrays#stream
          li Stream#of
          li BufferReader#lines
          li IntStream#range

      section
        h2 Intermediate Operations
        ul
          li
          li filter
          li map, flatMap
          li sorted
          li limit, skip
          li distinct
          li peek

      section
        h2 Terminal Operation
        ul
          li
          li collect, reduce
          li min, max, average, sum, count
          li findFirst, findAny
          li allMatch, anyMatch, noneMatch
          li forEach, forEachOrdered

      section
        h2 Sequential/Parallel Stream

      section
        h2 java.util.function
        ul
          li Interfaces
          ul
            li Function/BiFunction
            li Supplier
            li Predicate
            li Consumer
            li Int|Double|Long
          li Classes
          ul
            li Functions
            li Predicates
      section
        h2 java.util.function.BiFunction
        pre
          code.language-java.
            BiFunction<String, String, String> 
              join = (s, String t) -> s + t;

      section
        h2 java.util.function.Function
        ul
          li R apply(T t)
          li <V> Function<T,V> compose(Function<? super R,? extends V> after)

        pre.bullet
          code.language-java.
            public void modifyTheValue(int value,
              Function<Integer, Integer> function){
                int newValue = function.apply(value);
            }
            Function<Integer, Integer> testFunction = intVal -> {
              return intVal * 10;
            };

            myNumber = 15;
            modifyTheValue(myNumber, val-> val * 10);
            int x = testFunction.apply(myNumber);

      section
        h2 java.util.function.Supplier
        ul
          li A supplier of objects
          li T get()


      section
        h2 java.util.function.Predicate
        ul
          li Determines if the input object matches some criteria
          li boolean test(T t)
          li Predicate<T> and(Predicate<? super T> p)
          li Predicate<T> negate()
          li Predicate<T> or(Predicate<? super T> p)
          li Predicate<T> xor(Predicate<? super T> p)


      section
        h2 java.util.function.Consumer
        ul
          li Accepts a single input argument and returns no result
          li void accept(T t)
          li Consumer<T> chain(Consumer<? super T> other)

      section
        pre
          code.language-java.
            public void test(Supplier<Student> supplier,
              Predicate<Student> predicate,
              Consumer<Student> consumer) {
                if (predicate.test(s)) {
                  consumer.accept(supplier.get());
                }else {
                };
            }
 
            Consumer<Student> consumer = student -> {
                    System.out.println("Student Consumer: ");
                    System.out.println(student);
                };

            Predicate<Student> predicate = student -> 
                      student.getGender() == Person.Sex.MALE;

            Supplier<Student> supplier = () -> { 
              return new Student("first", "last", Person.Sex.MALE, 25);
            };

            test(supplier, consumer, predicate);

      section
        h2 Optional<T> Class
        ul
          li not in java.util.function
          li but in java.util
          li no if (x != null)
          li no NullPointerException

      section
        h2 Optional<T> Class
        ul
          li Optional.of()
          li Optional.empty()
          li all static methods

        pre.bullet
          code.language-java.
            Optional<String> name = Optional.of("zhangsan");
            Optional empty = Optional.empty();

      section
        h2 Optional<T> Class
        ul
          li Optional.isPresent
          li Optional.get

        pre.bullet
          code.language-java.
            try {
              if (name.isPresent()) {
                System.out.println(name.get());
              }
            } catch (NoSuchElementException ex) {
              System.out.println(ex.getMessage());
            }
 
      section
        h2 Optional<T> Class
        ul
          li Optional.ifPresent(Consumer<? super T> consumer)

        pre.bullet
          code.language-java.
            name.ifPresent((value) -> {
              System.out.println("Stuent name is : " + value);
            });

      section
        h2 Optional<T> Class
        ul
          li Optional.orElse
          li Optional.orElseGet(Supplier<T> other)

        pre.bullet
          code.language-java.
            empty.orElse("There is no value present!");
            name.orElse("There is some value!");

        pre.bullet
          code.language-java.
            empty.orElseGet(() -> "Default Value");
            name.orElseGet(() -> "Default Value");


      section
        h2 Optional<T> Class
        ul
          li Optional.orElseThrow(Supplier<V> exceptionFactory)

        pre.bullet
          code.language-java.
            class ValueAbsentException extends Throwable {
              ... ...
            }
            try {
              empty.orElseThrow(ValueAbsentException::new);
            } catch (Throwable ex) {
              ... ...
            }

      section
        h2 Optional<T> Class
        ul
          li OptionalDouble
          li OptionalInt
          li OptionalLong





    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/bespoke-forms/dist/bespoke-forms.min.js')
    script(src='bower_components/bespoke-fx/libs/modernizr/modernizr.custom.js')
    script(src='bower_components/bespoke-fx/dist/bespoke-fx.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='bower_components/prism/components/prism-java.js')
    script(src='bower_components/prism/components/prism-ruby.js')
    script(src='scripts/main.js')
    // endbuild
